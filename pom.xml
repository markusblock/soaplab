<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>org.soaplab</groupId>
	<artifactId>soaplab</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>soaplab</name>
	<description>soaplab project</description>
	
	<properties>
		<java.version>21</java.version>
		<vaadin.version>24.8.6</vaadin.version>
		<eclipsestore.version>3.0.0</eclipsestore.version>
		<beantutils.version>1.11.0</beantutils.version>
		<springdoc.version>2.8.9</springdoc.version>
		<equalsverifier.version>4.0.1</equalsverifier.version>
		<selenide.version>7.9.3</selenide.version>
  		<jacoco.version>0.8.13</jacoco.version>
  		<sonar.plugin.version>5.1.0.4751</sonar.plugin.version>
        
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>markusblock</sonar.organization>
        <sonar.projectKey>markusblock_soaplab</sonar.projectKey>
        <sonar.qualitygate.wait>true</sonar.qualitygate.wait>
        <sonar.qualitygate.timeout>600</sonar.qualitygate.timeout>
<!--        <sonar.junit.reportPaths>=target/surefire-reports,target/failsafe-reports</sonar.junit.reportPaths>-->
        
	</properties>
    
    <url>https://github.com/markusblock/soaplab</url>
    <scm>
      <url>https://github.com/markusblock/soaplab</url>
    </scm>
    <issueManagement>
      <url>https://github.com/markusblock/soaplab/issues</url>
    </issueManagement>

	
    <repositories>
        <!-- The order of definitions matters. Explicitly defining central here to make sure it has the highest priority. -->

        <!-- Main Maven repository -->
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>vaadin-prereleases</id>
            <url>
                https://maven.vaadin.com/vaadin-prereleases/
            </url>
        </repository>
        <!-- Repository used by many Vaadin add-ons -->
        <repository>
            <id>Vaadin Directory</id>
            <url>https://maven.vaadin.com/vaadin-addons</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    
    <pluginRepositories>
        <!-- The order of definitions matters. Explicitly defining central here to make sure it has the highest priority. -->
        <pluginRepository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>vaadin-prereleases</id>
            <url>
                https://maven.vaadin.com/vaadin-prereleases/
            </url>
        </pluginRepository>
    </pluginRepositories>  

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>  
	
	<dependencies>
	
		<!-- SPRING  -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
	    <dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-actuator</artifactId>
	    </dependency>
	    <dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-devtools</artifactId>
	        <optional>true</optional>
	    </dependency>	
		
		
        <!-- eclipse store -->
        <dependency>
            <groupId>org.eclipse.store</groupId>
            <artifactId>storage-embedded</artifactId>
            <version>${eclipsestore.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.store</groupId>
            <artifactId>storage-embedded-configuration</artifactId>
            <version>${eclipsestore.version}</version>
        </dependency>	        
		<dependency>
			<groupId>org.eclipse.store</groupId>
		    <artifactId>integrations-spring-boot3</artifactId>
		    <version>${eclipsestore.version}</version>
		</dependency>	
		
		<!-- LOMBOK -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>	

		<!-- VAADIN -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <!-- Replace artifactId with vaadin-core to use only free components -->
            <artifactId>vaadin-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
        </dependency>	
            
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>          
		
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>${beantutils.version}</version>
            <exclusions>
            	<exclusion>
            		<groupId>commons-logging</groupId>
            		<artifactId>commons-logging</artifactId>
            	</exclusion>
            </exclusions>
        </dependency>   		      
		
		<!-- TEST -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
        <dependency>
            <groupId>nl.jqno.equalsverifier</groupId>
            <artifactId>equalsverifier</artifactId>
            <version>${equalsverifier.version}</version>
            <scope>test</scope>
        </dependency> 
		
        <dependency>
            <groupId>com.codeborne</groupId>
            <artifactId>selenide</artifactId>
            <version>${selenide.version}</version>
            <scope>test</scope>
        </dependency>

		<dependency>
			<groupId>org.testcontainers</groupId>
		  	<artifactId>selenium</artifactId>
		  	<scope>test</scope>
		</dependency>	
		<dependency>
		    <groupId>org.testcontainers</groupId>
		    <artifactId>junit-jupiter</artifactId>
		    <version>${testcontainers.version}</version>
		    <scope>test</scope>
		</dependency>

		<!-- Testcontainer and selenium setup, NoClassDefFoundError -->
		<dependency>
		    <groupId>io.opentelemetry</groupId>
		    <artifactId>opentelemetry-sdk-extension-autoconfigure-spi</artifactId>
		</dependency>
		<dependency>
		    <groupId>io.opentelemetry</groupId>
		    <artifactId>opentelemetry-api</artifactId>
		</dependency>	
		<dependency>
		    <groupId>io.opentelemetry</groupId>
		    <artifactId>opentelemetry-sdk</artifactId>
		</dependency>			
		<dependency>
		    <groupId>io.opentelemetry</groupId>
		    <artifactId>opentelemetry-sdk-metrics</artifactId>
		</dependency>
	</dependencies>


	<build>
        <defaultGoal>spring-boot:run</defaultGoal>
        <plugins>
			
	        <plugin>
	            <groupId>org.apache.maven.plugins</groupId>
	            <artifactId>maven-compiler-plugin</artifactId>
	            <configuration>
	                <source>${java.version}</source>
	                <target>${java.version}</target>
	                <annotationProcessorPaths>
	                    <path>
	                        <groupId>org.projectlombok</groupId>
	                        <artifactId>lombok</artifactId>
	                        <version>${lombok.version}</version>
	                    </path>                         
	                </annotationProcessorPaths>
	            </configuration>
	        </plugin>			
			
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- Clean build and startup time for Vaadin apps sometimes may exceed
                             the default Spring Boot's 30sec timeout.  -->
                <configuration>
                    <wait>500</wait>
                    <maxAttempts>240</maxAttempts>
                </configuration>
            </plugin>

            <!--
                      Take care of synchronizing java dependencies and imports in
                      package.json and main.js files.
                      It also creates webpack.config.js if not exists yet.
                  -->
            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-frontend</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
			        <nodeAutoUpdate>true</nodeAutoUpdate>
			        <pnpmEnable>false</pnpmEnable>
			        <runNpmInstall>true</runNpmInstall>
				</configuration>
            </plugin>
			
<!--			<plugin>-->
<!--			  <groupId>org.jacoco</groupId>-->
<!--			  <artifactId>jacoco-maven-plugin</artifactId>-->
<!--			  <version>${jacoco.version}</version>-->
<!--			  <executions>-->
<!--			     first execution : for preparing JaCoCo runtime agent-->
<!--			     <execution>-->
<!--			     	<id>prepare-agent</id>-->
<!--			        <goals>-->
<!--                        <goal>prepare-agent</goal>-->
<!--			        </goals>-->
<!--			      </execution>-->
<!--			     second execution : for creating code coverage reports-->
<!--			      <execution>-->
<!--			         <id>report</id>-->
<!--			         <phase>test</phase>-->
<!--			         <goals>-->
<!--                        <goal>report</goal>-->
<!--			         </goals>-->
<!--			     </execution>-->
<!--			    </executions>-->
<!--			 </plugin>  -->
			 
			 <plugin>
               <groupId>org.jacoco</groupId>
               <artifactId>jacoco-maven-plugin</artifactId>
               <version>${jacoco.version}</version>
            
               <executions>
                   <execution>
                       <id>pre-unit-test</id>
                       <goals>
                           <goal>prepare-agent</goal>
                       </goals>
                       <configuration>
                           <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                           <propertyName>surefireArgLine</propertyName>
                       </configuration>
                   </execution>
                   <!-- Surefire unit Tests-->
                   <execution>
                       <id>post-unit-test</id>
                       <phase>test</phase>
                       <goals>
                           <goal>report</goal>
                       </goals>
                       <configuration>
                           <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
                           <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                       </configuration>
                   </execution>
                   <!-- FailsafeIntegration Tests -->
                   <execution>
                       <id>pre-integration-test</id>
                       <phase>pre-integration-test</phase>
                       <goals>
                           <goal>prepare-agent</goal>
                       </goals>
                       <configuration>
                           <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
                           <propertyName>failsafeArgLine</propertyName>
                       </configuration>
                   </execution>
                   <execution>
                       <id>post-integration-test</id>
                       <phase>post-integration-test</phase>
                       <goals>
                           <goal>report</goal>
                       </goals>
                       <configuration>
                           <dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
                           <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                       </configuration>
                   </execution>

                    <!-- Merged test coverage report -->
                    <execution>
                        <id>merge-unit-and-integration</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <directory>${project.build.directory}/coverage-reports/</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <destFile>${project.build.directory}/coverage-reports/merged.exec</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-merged-report</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${project.build.directory}/coverage-reports/merged.exec</dataFile>
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-coverage-report</outputDirectory>
                        </configuration>
                    </execution>                   
               </executions>
           </plugin>
			 
             <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <configuration>
                      <includes>
                          <include>**/*Tests.java</include>
                          <include>**/*Test.java</include>
                      </includes>
                      <argLine>${surefireArgLine}</argLine>
                  </configuration>
              </plugin>
              <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-failsafe-plugin</artifactId>
                  <configuration>
                      <includes>
                          <include>**/*IT.java</include>
                      </includes>
                      <excludes>
                          <exclude>**/*Test.java</exclude>
                          <exclude>**/*Tests.java</exclude>
                      </excludes>
                      <argLine>${failsafeArgLine}</argLine>
                  </configuration>
              </plugin>            
              
              <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar.plugin.version}</version>
              </plugin>
			       			          
        </plugins>
        
	</build>
	
    <profiles>
        <profile>
            <!-- Production mode is activated using -Pproduction -->
            <id>production</id>
            <properties>
            	<vaadin.productionMode>true</vaadin.productionMode>
            </properties> 
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.vaadin</groupId>
                        <artifactId>vaadin-maven-plugin</artifactId>
                        <version>${vaadin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <!-- assuming 'vaadin:prepare-frontend' is defined in build  -->
                                    <goal>build-frontend</goal>
                                </goals>
                                <phase>compile</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <productionMode>true</productionMode>
                            <pnpmEnable>true</pnpmEnable>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <dependencies>
	            <dependency>
	                <groupId>com.vaadin</groupId>
	                <artifactId>vaadin</artifactId>
	                <exclusions>
	                    <exclusion>
	                        <groupId>com.vaadin</groupId>
	                        <artifactId>vaadin-dev-server</artifactId>
	                    </exclusion>
	                </exclusions>
	            </dependency>
            </dependencies>
        </profile>

    </profiles>

</project>
